{"ast":null,"code":"var _jsxFileName = \"/Users/robinmarillia/Documents/dev/homeView/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { WEBVR } from 'three/examples/jsm/vr/WebVR.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      frame: '',\n      renderer: ''\n    };\n  }\n\n  componentDidMount() {\n    //this.setState({ renderer: WEBVR.createButton( renderer, { referenceSpaceType: 'local' } ) });\n    // on ajoute l'élément au composant react\n    var camera, scene, renderer;\n    var isUserInteracting = false,\n        onMouseDownMouseX = 0,\n        onMouseDownMouseY = 0,\n        lon = 0,\n        onMouseDownLon = 0,\n        lat = 0,\n        onMouseDownLat = 0,\n        phi = 0,\n        theta = 0;\n    var frame = init();\n    animate(); //this.setState({frame: frame});\n\n    this.mount.appendChild(frame);\n\n    function init() {\n      var mesh;\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1100);\n      camera.target = new THREE.Vector3(0, 0, 0);\n      scene = new THREE.Scene();\n      var geometry = new THREE.SphereBufferGeometry(30, 60, 40); // invert the geometry on the x-axis so that all of the faces point inward\n\n      geometry.scale(-1, 1, 1);\n      var texture = new THREE.TextureLoader().load('img/IMG_7233.JPG');\n      var material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      return renderer.domElement;\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/Users/robinmarillia/Documents/dev/homeView/src/index.js"],"names":["React","Component","ReactDOM","THREE","WEBVR","App","constructor","props","state","frame","renderer","componentDidMount","camera","scene","isUserInteracting","onMouseDownMouseX","onMouseDownMouseY","lon","onMouseDownLon","lat","onMouseDownLat","phi","theta","init","animate","mount","appendChild","mesh","PerspectiveCamera","window","innerWidth","innerHeight","target","Vector3","Scene","geometry","SphereBufferGeometry","scale","texture","TextureLoader","load","material","MeshBasicMaterial","map","Mesh","add","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","domElement","requestAnimationFrame","render","ref","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { WEBVR } from 'three/examples/jsm/vr/WebVR.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      frame: '',\n      renderer: ''};\n  }\n  componentDidMount() {\n\n    //this.setState({ renderer: WEBVR.createButton( renderer, { referenceSpaceType: 'local' } ) });\n    // on ajoute l'élément au composant react\n\n    var camera, scene, renderer;\n\n\t\tvar isUserInteracting = false,\n\t\t\t\tonMouseDownMouseX = 0, onMouseDownMouseY = 0,\n\t\t\t\tlon = 0, onMouseDownLon = 0,\n\t\t\t\tlat = 0, onMouseDownLat = 0,\n\t\t\t\tphi = 0, theta = 0;\n\n    var frame = init();\n\n\t\tanimate();\n    //this.setState({frame: frame});\n    this.mount.appendChild( frame );\n\n    function init() {\n\n        var mesh;\n\n\n        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1100 );\n        camera.target = new THREE.Vector3( 0, 0, 0 );\n\n        scene = new THREE.Scene();\n\n        var geometry = new THREE.SphereBufferGeometry( 30, 60, 40 );\n        // invert the geometry on the x-axis so that all of the faces point inward\n        geometry.scale( -1, 1, 1 );\n\n        var texture = new THREE.TextureLoader().load( 'img/IMG_7233.JPG' );\n\n        var material = new THREE.MeshBasicMaterial( { map: texture } );\n\n        mesh = new THREE.Mesh( geometry, material );\n\n        scene.add( mesh );\n\n        renderer = new THREE.WebGLRenderer();\n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n\n        return(renderer.domElement);\n      }\n\n\n      function animate() {\n      \trequestAnimationFrame( animate );\n      \trenderer.render( scene, camera );\n      }\n\n\n\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div ref={ref => (this.mount = ref)} />\n\n      </div>\n    )\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}