{"ast":null,"code":"var _jsxFileName = \"/Users/robinmarillia/Documents/dev/SchoolBag/lab/react-js/chat/src/App.js\";\nimport React from 'react';\nimport { sendMessage, getMessages, sendPseudo, getPseudo } from './api';\nimport './App.css';\n\nclass TextSubmit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      placeholder: 'Entrez votre pseudo'\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    const purpose = this.props.purpose;\n\n    if (purpose == 'start') {\n      sendPseudo(this.state.inputValue); // on remet l'input à valeure vide\n\n      document.getElementById('inputText').value = ''; // on change le placeholder\n\n      this.setState({\n        placeholder: \"Ecrivez votre message\"\n      });\n    } else {\n      className = 'MChat-textSubmit';\n      sendMessage(this.state.inputValue); // on remet l'input à valeure vide\n\n      document.getElementById('inputText').value = '';\n    } //this.props.parentCallback(this.state.inputValue);\n\n\n    event.preventDefault();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"inputText\",\n      type: this.props.typeInput,\n      value: this.state.value,\n      onChange: this.handleChange,\n      placeholder: this.state.placeholder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.props.valueSubmit));\n  }\n\n}\n\nfunction Message(props) {\n  const letter = props.user.substring(0, 1);\n  return React.createElement(\"div\", {\n    className: \"MChat-message-wraper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"MChat-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, letter), React.createElement(\"span\", {\n    className: \"MChat-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, props.text));\n}\n\nclass MicroChat extends React.Component {\n  constructor(props) {\n    super(props); // on set un tableau vide\n\n    this.state = {\n      arrayMessage: [],\n      purpose: 'start',\n      pseudo: ''\n    }; // on met chaque nouveau message dans le tableau\n\n    getPseudo((err, pseudo) => {\n      document.getElementById('newcomer').append(pseudo + ' est connecté !');\n      this.setState({\n        purpose: 'conv'\n      });\n    }); // on met chaque nouveau message dans le tableau\n\n    getMessages((err, retour) => {\n      const message = retour.message;\n      const user = retour.pseudo;\n      const newArray = this.state.arrayMessage.concat(React.createElement(Message, {\n        user: user,\n        text: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n      this.setState({\n        arrayMessage: newArray\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      className: \"MChat-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"MChat-content-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      id: \"newcomer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), this.state.arrayMessage), React.createElement(TextSubmit, {\n      purpose: this.state.purpose,\n      typeInput: \"text\",\n      valueSubmit: \"Envoyer\",\n      parentCallback: this.callbackFunction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MicroChat;","map":{"version":3,"sources":["/Users/robinmarillia/Documents/dev/SchoolBag/lab/react-js/chat/src/App.js"],"names":["React","sendMessage","getMessages","sendPseudo","getPseudo","TextSubmit","Component","constructor","props","state","inputValue","placeholder","handleSubmit","bind","handleChange","event","setState","target","value","purpose","document","getElementById","className","preventDefault","render","typeInput","valueSubmit","Message","letter","user","substring","text","MicroChat","arrayMessage","pseudo","err","append","retour","message","newArray","concat","callbackFunction"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { sendMessage, getMessages, sendPseudo, getPseudo } from './api';\n\nimport './App.css';\n\n\nclass TextSubmit extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      inputValue: '',\n      placeholder: 'Entrez votre pseudo'\n  };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n\n  handleSubmit(event) {\n    const purpose = this.props.purpose;\n\n    if(purpose=='start'){\n\n\n      sendPseudo(this.state.inputValue);\n\n      // on remet l'input à valeure vide\n      document.getElementById('inputText').value = ''\n\n      // on change le placeholder\n      this.setState({placeholder: \"Ecrivez votre message\"})\n    }\n    else{\n      className =  'MChat-textSubmit';\n      sendMessage(this.state.inputValue);\n\n      // on remet l'input à valeure vide\n      document.getElementById('inputText').value = ''\n    }\n\n    //this.props.parentCallback(this.state.inputValue);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className={className}>\n        <input id=\"inputText\" type={this.props.typeInput} value={this.state.value} onChange={this.handleChange} placeholder={this.state.placeholder}/>\n        <button onClick={this.handleSubmit}>{this.props.valueSubmit}</button>\n      </div>\n    );\n  }\n}\n\nfunction Message(props){\n  const letter = props.user.substring(0,1);\n  return(\n    <div className=\"MChat-message-wraper\"><span className=\"MChat-user\">{letter}</span><span className=\"MChat-message\">{props.text}</span></div>\n  )\n}\n\nclass MicroChat extends React.Component {\n  constructor(props){\n    super(props)\n    // on set un tableau vide\n    this.state = {\n      arrayMessage: [],\n      purpose: 'start',\n      pseudo: ''\n    };\n\n    // on met chaque nouveau message dans le tableau\n    getPseudo((err, pseudo) => {\n      document.getElementById('newcomer').append(pseudo+' est connecté !');\n      this.setState({\n        purpose: 'conv'\n      })\n    });\n    // on met chaque nouveau message dans le tableau\n    getMessages((err, retour) => {\n\n      const message = retour.message;\n      const user = retour.pseudo;\n      const newArray = this.state.arrayMessage.concat(\n        <Message user={user} text={message}/>\n      );\n      this.setState({arrayMessage: newArray})\n    });\n\n  }\n\n\n  render() {\n\n    return (\n      <section className=\"MChat-container\">\n        <div className=\"MChat-content-message\">\n          <span id=\"newcomer\"></span>\n          {this.state.arrayMessage}\n        </div>\n        <TextSubmit purpose={this.state.purpose} typeInput=\"text\" valueSubmit=\"Envoyer\" parentCallback = {this.callbackFunction}/>\n      </section>\n    );\n  }\n}\n\n\nexport default MicroChat;\n"]},"metadata":{},"sourceType":"module"}